# 1. Create a class which given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc.

    class decide_century:
        @staticmethod
        def year_to_century(year):
            century = (year - 1) // 100 + 1
            return century
    
    year_converter = decide_century()
    year = 2024
    century = year_converter.year_to_century(year)
    print(f" {year} - {century} century ")



# 2. Create a class given the string, check if it is a palindrome. word should be lowercase and 1 ≤ inputString.length ≤ 105



        class Palindrome:
            @staticmethod
            def is_palindrome(input_string):
                input_string = input_string.lower()
        
                return input_string == input_string[::-1]
        
        palindrome_checker = Palindrome()
        input_string = "ara"
        result = palindrome_checker.is_palindrome(input_string)
        if result:
            print(f"'{input_string}' is palindrome.")
        else:
            print(f"'{input_string}' is not a palindrome.")


# 3. Create a Class which given an list of integers, find the pair of adjacent elements that has the largest product and return that product.


        class maxproduct:
            def __init__(self, nums):
                self.nums = nums
            def adjacent_product(self):
        
                max_product = self.nums[0] * self.nums[1]
                for i in range(1, len(self.nums) - 1):
                    product = self.nums[i] * self.nums[i + 1]
                    max_product = max(max_product, product)
        
                return max_product
        
        nums_list = [3, 6, -2, -5, 7, 3]
        find = maxproduct(nums_list)
        max_product = find.adjacent_product()
        print(max_product)


# 4. Create a class which given a list of strings, return another list containing all of its longest strings.



        class longest:
            def __init__(self, words):
                self.words = words
            def find_the_longest(self):
                max_length = len(max(self.words, key=len))
                longest_word = [i for i in self.words if len(i) == max_length]
                return longest_word
        
        words = ["green", "blue", "gray", "white", "black", "red"]
        finder = longest(words)
        result = finder.find_the_longest()
        print(result)

# 5. Ticket numbers usually consist of an even number of digits.A ticket number is considered lucky if the sum of the first half of the digits is equal to the sum of the second half.Given a ticket number n, determine if it's lucky or not. Example For n = 1230, the output should be


        def lucky(n):
            ticket_str = str(n)
        
            if len(ticket_str) % 2 != 0:
                return False
        
            half = len(ticket_str) // 2
            first_half = sum(int(i) for i in ticket_str[:half])
            second_half= sum(int(i) for i in ticket_str[half:])
        
            return first_half == second_half
        
        ticket_number = 123042
        is_lucky = lucky(ticket_number)
        print(is_lucky)

# 6. Several people are standing in a row and need to be divided into two teams. The first person goes into team 1, the second goes into team 2, the third goes into team 1 again, the fourth into team 2, and so on.You are given an array of positive integers - the weights of the people. Return an array of two integers, where the first element is the total weight of team 1, and the second element is the total weight of team 2 after the division is complete.



        def divide(weights):
            team_one = sum(weights[i] for i in range(len(weights)) if i % 2 == 0)
            team_two = sum(weights[i] for i in range(len(weights)) if i % 2 != 0)
        
            return [team_one, team_two]
        
        
        weights = [50, 60, 60, 45, 70]
        team_weights = divide(weights)
        print(team_weights)    




